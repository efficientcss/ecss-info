<div id="intro">
<header>
<h2 class="as-visually-hidden">Introduction</h2>

Efficient CSS is all you need to avoid common styling problems. Nothing more, really.

**ECSS sets simple rules for efficient styling.** No more naming everything, no more technological dependencies. Only intentional, consistent, expressive, predictable, sustainable CSS.

</header>
<div style="--DivItemBasis: 12rem;">
<section>
<h3 class="h4">Want help enforcing rules?</h3>

üëÆ Gently nudge you and your team into ECSS.

[Install the Stylelint config](https://www.npmjs.com/package/@efficientcss/stylelint-config-ecss){.button}

</section>

<section>
<h3 class="h4">Eager to build something?</h3>

üèÅ A quick &amp; efficient starting point is within reach!

[Clone the scaffolding library (WIP)](https://github.com/efficientcss/scaffolding)

</section>

<section>
<h3 class="h4">Want to know the beast?</h3>

üì∞ Go ahead and see what you think of it!

[Dive into ECSS rules](#rules)

</section>

<section>
<h3 class="h4">Curious about it all?</h3>

Well, keep scrolling!

</section>
</div>

<section>
## Why ECSS?

Because CSS as a language is misunderstood and undeservedly maligned. Because simple rules and low impact tools can go a long way in making sure the CSS codebase is light, simple and scalable. ECSS is a global approach to producing efficient design systems with CSS.

</section>
</div>
<section>
## Values{#values}

<div style="--DivItemBasis: 20rem;">
<section>
### Intentionality

**Clear objectives, rational decisions.**

Every parcel of CSS has an objective. This objective should be clear to anyone reading the code. Be it HTML or CSS. Selectors are the perfect vehicle for intentionality. ECSS incentivizes the use of rational selectors.

</section>

<section>
### Consistency

**Repeating patterns save time &amp; energy.**

Flexible naming guidelines give the codebase a consistency encouraging standardization and reuse. Prefixes and usage guidelines enforced through linting insures everyone on your team will follow ECSS rules.

</section>

<section>
### Simplicity

**"Simple" is writing less code &amp; and limiting dependencies.**

Class soup &amp; divitis aren't simple. Untold numbers of `@media`{.css} queries aren't either. But modern CSS is. By accepting CSS for what it is (a designing language!) you can do *a lot* of styling mileage with very little code.

</section>

<section>
### Expressivity

**Code that speaks for itself is actually achievable.**

"thumbnail as-circle with-border" is instantly understandable while "h-10 w-10 bdr-50 br-1 overh" is not. Code should communicate information. The clearer the information, the easier it is to understand the system. Mistaken semantics should give way to expressiveness. *Expressive best practices work.*

</section>

<section>
### Predictability

**Using simple but consistent authoring rules leads to predictability.**

It feels good to dive into unknown code... while already knowing what it looks like. Consistency, repeating patterns, simplicity (yes, again) all coalesce into predictable code. And predictable code means less stress, less friction and happier teams!

</section>

<section>
### Sustainability

**Vanilla CSS is future ready.**

In practice it means being at the forefront of progress and evolution. No need to wait for third parties to implement new features. You can use `clamp()`{.css} as of now and say goodbye to 80% of your media queries. No more `sm-this md-that`{.html}. Only clean and modern code.

</section>
</div>
</section>
<link rel="stylesheet" href="../assets/css/6.components/of-side-by-side-h-p.css" />
<section class="of-side-by-side-h-p as-numbered-list">

## Guiding principles{#principles}

<article>
### CSS is a *designing* language, not a scripting one.{#designing-language}

CSS authoring should reflect *design* patterns, concepts and perspectives. With global (sorry) scales, tokens, rules, etc. you limit repetition and facilitate future styling extension.

</article>

<article>
### Empowering designers to refine their work autonomously is efficient.{#design-empowerment}

Making the needed parts of CSS being intelligible (code-savvy or not!) to designers cuts stress, time and promotes good allocation of human resources. Refining design in the browser is a great vector of economic profitability.

</article>

<article>
### Not all CSS properties are born equal.{#properties-not-equal}

The box-model properties (`display`{.css}, `position`{.css}, `width`{.css}, etc.) are extremely sensitive and potentially way more disruptive than, say, color or typographic ones. The former are the stuff of professional CSS authors and the latter are the ones designers should be able to use, modify and experiment with in context.

</article>

<article>
### Properties &amp; units have specific roles and usage.{#specific-role}

Limiting their use to these roles enhances clarity and promotes consistency as well as predictability. The same goes for units. Some suggest type, others, images or rhythm. Use them intentionally &amp; rationally to communicate meaning.

</article>

<article>
### Components and patterns *need* structure.{#component-structure}

Trying to abstract it away is vain. Instead, documentation and dilligence are key. HTML is semantically rich, so choose the right tags and refrain from changing them for superficial reasons. One would not remove or change `class="header"`{.html} without understanding its purpose first, then one should not change or remove `<header></header>`{.html} on a whim either.

</article>

<article>
### CSS Selectors are vehicles for intention.{#selector-intention}

Every selector particle must have a purpose and if not, must be discarded with. This extraneous `div`{.css} in `.card div h2`{.css} is what makes CSS brittle. These are *not* ["best practices"](https://adamwathan.me/css-utility-classes-and-separation-of-concerns/).

</article>

<article>
### Selector types all have a function.{#selector-function}

Each one of them may be of use in a certain context. No absolute usage rule should be edicted. It's not "always" or "never" but "it depends" and "why". Absolute rules absolutely corrupt. Or something like that.

</article>

<article>
### Selection specificity should be harnessed, not rejected.{#harness-specificity}

Nevertheless, "always" (ahem) keep it as low as possible. Yes, in 2015 it may have not been easy. But it's 2023 and [new](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers) [features](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) are now widely supported. Use them.

</article>

<article>
### Global scope in CSS is not a sin.{#global-scope}

Remember, *CSS is a designing language* and the global scope fits perfectly in design's fundamentally layered, dimensional approach. Programming best practices are not necessarily designing best practices. Embrace design best practices.

</article>

<article>
### Global design rules must be largely anonymous &amp; unqualified.{#global-rules}

Only a few declarations per ruleset only. We are talking rhythm, typography, color; not `display`{.css} or `position`{.css}. *This* is the way of limiting repetition, bloat &amp; complexity.

</article>

<article>
### One should wait until a concept is clearly understood before naming it.{#understood-concept}

Until then use HTML elements. Premature abstraction or ["solving problems not yet encountered"](https://en.wikipedia.org/wiki/Overengineering) are bigger problems than the use of `header`{.css} in CSS. Yes, these are programming best practices. But who told you CSS development was pure design?

</article>

<article>
### When more than 3 rules are repeated more than 3 times, a concept *is* emerging.{#rule-repetition}

Rules should then be concentrated by naming and using said concept instead of the bare rules. Reusability, expressivity and simplicity are then greatly improved.

</article>

<article>
### Named concepts must be autonomous and self-sufficient.{#autonomous-concept}

Named concepts should not be defined inside another named concept. If it ever is necessary, the child concept must be internal to the parent concept and is *not* to be reused anywhere else.

</article>

<article>
### Manipulating named concepts throughout multiple files is strictly prohibited.{#concept-manipulation}

All rules for a named concept must reside in the same, unique CSS file. For authors and maintainers to have confidence in the system, there must a single [source of truth](https://en.wikipedia.org/wiki/Single_source_of_truth) for any concept.

</article>

<article>
### State, variant or structural are child concepts and must be namespaced &amp; prefixed.{#child-concepts}

These concepts may be represented as child or combined classes. Never to be used alone, always alongside the parent concept. Yes, here are both "never" *and* "always" in the same sentence. ["Double jeopardy, we are fine"](https://www.youtube.com/watch?v=Z58eTP2gcw0).

</article>

<article>
### Namespaced classes should generally be implemented with specificity reducing selectors.{#child-specificity}

Unless otherwise needed, one should strive to keep specificity at 21 or below. With a preference for around 10 to 12. Modern and widely supported pseudo-selectors must here be used.

</article>

<article>
### One may not come up at first with the efficient way to select interface elements.{#selector-efficiency}

One's intention may not be clear at the beginning of a styling job. Instead of fruitlessly trying and trying, a code "quarantine" file should be temporarily used until the right selection manifests itself. Still, no quarantine file should ever be published publicly.

</article>

<article>
### HTML should be as simple and expressive as can be.{#expressive-html}

Refrain from over-containing, don't use `<div>`{.html} where you could use `<aside>`{.html}. Dont wrap your single-level navigation in unordered lists. And yes, simple navigation is [accessible](https://dockyard.com/blog/2019/11/29/using-nav-without-a-list-element). Keep it simple... Suzy.

</article>

<article>
### Any HTML element should endorse one role only.{#one-role}

As per the famous programming [best practice](https://en.wikipedia.org/wiki/Single-responsibility_principle) (again, programming in designing), semantic tags are for... semantics whilst `<div>`{.html} or `<span>`{.html} tags are for graphical or logical division. Any type of grid should be implemented with `<div>`{.html} tags.

</article>

<article>
### Any `@media`{.css} query adaptation must be included in its related concept's file.{#adaptation-included}

Not as as a separate file, not as suffixed classes. If one uses utility classes, the provided rules should not be query dependent but rather be universally needed, in every media configuration.

</article>

<article>
### Whole stylesheets are better used when global.{#global-stylesheet}

Media query scopes should be used in HTML `<link>`{.html} tags to promote reuse, performance and optimization concerns. Each fundamental design layer should be autonomous, independent and removable.

</article>

<article>
### Component styling should only be served with live components.{#component-styling}

Not as a big minified file in the `<head>`{.html} tag of the document. This way, the infamous problem of loading unused CSS is practically solved, without any technological debt. First render is also faster since only what is used is processed by the browser. As a bonus, you get the CSS file path in component file.

</article>

<article>
### Let the browser do as much of the rendering work as it can.{#browser-rendering}

By embracing fluidity, adaptativity is mostly done by the browser. Less rules are needed to insure correct rendering in the infinite number of usage contexts.

</article>

<article>
### Make full use of freely available development tools by going with the grain of the Web platform.{#devtools}

By using "just-in-time" rulesets, design tokens, the cascade and intentional selection, the debugging & refining workflow is simpler, lighter and clearer. Devtools are our friends!

</article>

<article>
### Eschewing technological abstractions like high-level frameworks spurs lighter, simpler native code.{#native-code}

By writing native CSS, one uses CSS better; by writing native HTML, one writes HTML better. With better CSS and better HTML comes a better user experience.

</article>

</section>

<link rel="stylesheet" href="../assets/css/6.components/of-side-by-side-text-code.css" />
<section class="of-side-by-side-text-code">
## Authoring rules{#rules}

<!-- - [TODO] : use of style attributes with custom properties. -->

<article>
<div>
<div>
<header>
### All component selectors *must* start with its filename.{#selector-filename}
</header>

<section>

#### Principles

- [Autonomous concepts](#autonomous-concept)
- [Concept manipulation](#concept-manipulation)

</section>
<section>

#### Notes

To exclude a file from this rule in the **Stylelint** config, prefix the filename with a digit or "x-" as in "x-quarantine.css"

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
/* card.css */
.card {
    ...
}
```

```css
/* Don't */
/* card.css */
.small-card {
    ...
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### All paddings should first be uniform and then be adjusted if necessary.{#padding-irregular}
</header>

<section>
#### Principles

- [Specific role](#specific-role)
</section>

<section>
#### Notes

Non-uniform paddings may be used in particular instances for `overflow`{.css} reasons or for added pseudo-content. Without these reasons, non-uniform spacing may be better created with margins.

</section>

</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card {
    padding: 20px;
    padding-top: 30px;
}
```

```css
/* Don't */
.card {
    padding: 30px 20px 20px 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>
<div>
<div>
<header>
### Paddings are to be applied on containing and interactive elements only.{#content-padding}
</header>
<section>
#### Principles

- [One role only](#one-role)
</section>

<section>
#### Notes

Text elements should only host text styles while container elements can host theming styles. In some instances, container elements could host text styles to be inherited by children.

</section>

</div>

<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card header {
    padding: 10px;
}
```

```css
/* Don't */
.card h2 {
    padding: 10px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Horizontal margins should not be applied to text elements.{#content-margin}
</header>
<section>
#### Principles

- [Specific roles and usage](#specific-role)
- [One role only](#one-role)
</section>

<section>
#### Notes

Horizontal margins can be applied to text elements in the case of `inline`{.css} elements such as icons or tags &amp; on indented elements like `blockquote`{.html}.

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card header {
    padding: 20px;
}
```

```css
/* Don't */
.card h2 {
    margin-left: 20px;
    margin-right: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Typographic elements should use inheritance when possible.{#type-inheritance}
</header>
<section>
#### Principles

- [Specific roles and usage](#specific-role)
- [Global scope](#global-scope)
</section>
<section>
#### Notes

Inheritance allows for high-level styling. With little code, we cast a wide net while limiting specificity to a minimum.

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>

```css
/* Do */
html {
    line-height: 1.5;
}
```

```css
/* Don't */
p {
    line-height: 1.5;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Design tokens should be used for most numerical values.{#design-tokens}
</header>
<section>
#### Principles

- [Designing language](#designing-language)
- [Designer empowerment](#design-empowerment)
- [Development tools](#devtools)
</section>

<section>
#### Notes

Numerical values should only be used for exceptional alignments. These should be commented to communicate the intent. Even then, why not create a bespoke property meaningfully named?

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card {
    padding: var(--small-spacing);
}
```

```css
/* Don't */
.card {
    padding: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Conjoined properties should be kept together using nesting.{#conjoined-properties}
</header>
<section>
#### Principes

- [Selector intention](#selector-intention)
- [Selector function](#selector-function)
- [Component structure](#component-structure)

</section>

<section>
#### Notes

Certain properties need to be joined to others, using a precise structure, to be functional. It is important to keep this relationship clear and explicit. Nesting simply fulfills this role.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.flex-module {
    display: flex;

    @media (orientation: portrait) {
        flex-direction: column;
    }

    & > * {
        flex-basis: 40ch;
    }
}
```

```css
/* Incorrect */
.flex-module {
    display: flex;
}

/* ... */

.unrelated-selector {
    flex-basis: 40ch;
}

@media (orientation: portrait) {
    .flex-module {
        flex-direction: column;
    }
}

```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Repeating default rules is discouraged.
</header>
<section>
#### Principles

- [Selector intention](#selector-intention)
- [Selector function](#selector-function)
</section>

<section>
#### Notes

Any instance of repeating default *must* be justified in a comment.

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.dropdown:not(:hover) {
    display: none;
}
```

```css
/* Don't */
.dropdown {
    display: none;
}

.dropdown:hover {
    display: block;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### All class entities besides components *must* be prefixed.{#prefixed-entities}
</header>
<section>
#### Principles

- [Child concepts](#child-concepts)
- [Selector intention](#selector-intention)
- [Selector function](#selector-function)
- [Autonomous concepts](#autonomous-concept)
</section>

<section>
#### Notes

Modifying components and entities across the code base, from one file to another, is the greatest source of unpredictability (and probably frustration) in CSS development. By forcing the use of explicit and exclusive prefixes, CSS becomes substantially more predictable, expressive and robust.

We propose this nomenclature of prefixes:

- `as-`{.css}: generic graphic form.
- `of-`{.css}: group of elements.
- `is-`{.css} interactive state of the system.
- `on-`{.css}: user interaction.
- `to-`{.css}: functional role.
- `__`{.css}: internal entity.
- `with-`{.css}: functional rule.
- `from-*-to-`{.css}: adaptive patterns.

</section>
</div>
<aside>
#### Example {.as-visually-hidden}
<div>
```css
/* Do */
.card.as-circle {
    width: 20px;
}

.card .__ctn {
    display: grid;
}

button.to-toggle-nav {
    appearance: none;
}

.with-background-color-black {
    background-color: black;
}
```

```css
/* Don't */
.card.circle {
    width: 20px;
}

.card .ctn {
    display: grid;
}

.bg-dark {
    background-color: black;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Nested selectors must start with `&`{.css}.{#nested-selectors}
</header>
<section>
#### Principes

- [Selector function](#selector-function)

</section>
<section>
#### Notes

The use of `&` in the selection makes the nesting explicit and prevents comprehension errors due to long nestings.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}
<div>
```css
/* Do */
.sidebar-layout {
    display: grid;

    &>main {
        grid-column: 1 / 3;
    }

    /* ... */

    &>footer {
        grid-column: 1 / 4;
    }
}

```

```css
/* Don't */
.sidebar-layout {
    display: grid;

    main {
        grid-column: 1 / 3;
    }

    /* ... */

    footer {
        grid-column: 1 / 4;
    }
}

```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Nesting is restricted to two levels only.{#nesting-level}
</header>
<section>
#### Principles

- [Child concepts](#child-concepts)
- [Selector intention](#selector-intention)

</section>
<section>
#### Notes

Nesting can encourage authoring on autopilot, without thinking about our selection intention. That's one reason why we will ultimately write `.card div h2`{.css} instead of `.card h2`{.css}, fragilizing our CSS. One level of nesting should be enough almost all cases.

</section>

</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card {
    &:hover
        & div {
            display: grid;
        }

        & h2 {
            color: grey;
        }
    }
}
```

```css
/* Don't */
.card {
    &:hover
        & div {
            display: grid;

            & h2 {
                color: grey;
            }
        }
    }
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### The use of specific sizes should be avoided.{#specific-sizes}
</header>
<section>
#### Principles

- [Properties are not equal](#properties-not-equal)
- [Specific role](#specific-role)
- [Browser rendering](#browser-rendering)
</section>
<section>
#### Notes

The Web is fluid and authoring should embrace this fluidity. By choosing to limit dimensions of our components instead of dictating them, we delegate work to the browser, letting it do its job. Fixed dimensions should be only be applied to graphical elements like pictures, videos and icons.

</section>

</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card {
    max-width: 40ch;
}
```

```css
/* Don't */
.card {
    width: 40ch;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Use attribute selectors to convey unicity.
</header>
<section>
#### Principles

- [Selector intention](#selector-intention)
- [Specific role](#specific-role)
- [Harness specificity](#harness-specificity)
</section>
<section>
#### Notes

Ids convey meaning but their CSS selector is a specificity nightmare. Use attribute selector to keep the meaning (unicity!) while keeping specificiy at sane levels. Other use cases includes form controls &amp; inputs and js managed states (ie: `[data-state="active"]`{.css})

</section>

</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
[id="main"] {
    max-width: 80ch;
}
```

```css
/* Don't */
#main {
    max-width: 80ch;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### The use of positioning and display rules should be minimized.
</header>
<section>
#### Principles

- [Properties are not equal](#properties-not-equal)
- [Browser rendering](#browser-rendering)
</section>

<section>
#### Notes

Use these properties only on elements needing them. Use the narrowest selectors that makes sense in the context.

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card header {
    display: flex;
}
```

```css
/* Don't */
header {
    display: flex;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Overqualified selectors are discouraged.{#overqualified-selectors}
</header>
<section>
#### Principles

- [Harness specificity](#harness-specificity)
- [Selector intention](#selector-intention)
</section>
<section>
#### Notes

Class entities should not be combined with tag selectors. Generic selectors can be used as a selection piece but not as qualifiers. Exceptionally, certain specific tags such as `html`{.css} or `body`{.css} could be used to restrict the application of a class entity.

</section>

</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
html.is-loading {
    opacity: 0;
}

.card {
    color: red;
}
```

```css
/* Don't */
article.card {
    color: red;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Components cannot exert outside influence.{#component-outside}
</header>
<section>
#### Principles

- [Autonomous concepts](#autonomous-concept)
- [Properties are not equal](#properties-not-equal)
- [Specific roles and usage](#specific-role)
</section>
<section>
#### Notes

Components are made to fit into ‚Äúholes‚Äù. These holes are managed by another component or a higher-level utility (e.g. a grid or carousel). No component in this sense should incorporate margins. These are applied as a rhythm by a parent. Thus, the components are versatile and reusable in various contexts.

</section>


</div>
<aside>
#### Example {.as-visually-hidden}


<div>
```css
/* Do */
.as-stack>*+* {
    margin-top: 20px;
}
```

```css
/* Don't */
.image-module {
    margin-top: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Overflow should not be hidden.{#overflow-hidden}
</header>
<section>
#### Principles

- [Browser rendering](#browser-rendering)
- [Properties are not equal](#properties-not-equal)
</section>

<section>
#### Notes

By hiding the way browsers treat overflowing items, we may hide content without knowing. By using `auto`{.css} instead of `hidden`{.css}, the oveflowing content will be accessible *and* the scrollbar will signal the design problem instead of hiding it. Hiding scrollbars may be necessary in some particular composition (see this very site's portrait adaptation for an example!).

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.container {
    max-height: 50dvh;
    overflow: auto;
}
```

```css
/* Don't */
.container {
    max-height: 50dvh;
    overflow: hidden;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Numbers in class names are to be avoided.{#numbered-classes}
</header>
<section>

#### Principles

- [Wait before naming](#understood-concept)
- [Selector intention](#selector-intention)

</section>
<section>
#### Notes

Adding a number to a class demonstrates a poor understanding of its role and communicates no clear intent. Ask yourself why you need to add a number and use the answer to explicitly name your class. If you need to use the structure to style certain elements, use the relevant pseudo-classes instead.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Do */
.card {
    color: grey;
    font-size: 18px;
}

.card.as-featured {
    color: red;
    font-size: 20px;
}

.image:nth-child(2) {
    margin-left: 20px;
}

:nth-child(2 of .image) {
    margin-left: 20px;
}
```

```css
/* Don't */
.card {
    color: grey;
    font-size: 18px;
}

.card-1 {
    color: red;
    font-size: 20px;
}

.image2 {
    margin-left: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Magic numbers *must* be avoided or explained in a line comment.{#magic-numbers}
</header>
<section>
#### Principles

- [Designing language](#designing-language)
- [Designer empowerment](#design-empowerment)
- [Specific roles and usage](#specific-role)
</section>

<section>
#### Notes

Value and unit choices should be dictated by the graphic language and its design tokens. Absolute values in numerical form should be reserved to special cases like bespoke icon alignment or bullet list padding. The intention *must* be clear in itself or commented if not.

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.sidebar {
    top: var(--header-height);
}
```

```css
/* Don't */
.sidebar {
    top: 53px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Rhythm *must* be applied in one direction only, preferably top.
</header>
<section>
#### Principles

- [Designing language](#designing-language)
- [Specific roles and usage](#specific-role)
</section>

<section>
#### Notes

Spacing is rhythm, a fundamental design concept. Rhythm occurs *between* graphical elements and should be applied as such in CSS. The [lobotomized owl](https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/){target="\_blank"} selector (`*+*`{.css}) is tailor made for this task. When using a flex container, the `gap`{.css} property does it all for you!

</section>
</div>
<aside>
#### Example {.as-visually-hidden}


<div>
```css
/* Do */
.as-stack>*+* {
    margin-top: 20px;
}
```

```css
/* Don't */
.as-stack>* {
    margin-top: 20px;
    margin-bottom: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### The use of problematic units is discouraged.
</header>
<section>
#### Principles

- [Specific roles and usage](#specific-role)
</section>

<section>
#### Notes

Static viewport units (`vh`{.css}, `vw`{.css}, `vmin`{.css}, `vmax`{.css}) are famously problematic, particularly when used as `100vh`{.css} or `100vw`{.css}. [Dynamic viewport units](https://caniuse.com/viewport-unit-variants){target="\_blank"} are better suited for this task.

</section>

</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
nav {
    min-height: 100dvh;
}
```

```css
/* Don't */
nav {
    min-height: 100vh;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Tag selectors should be leveraged inside components.
</header>
<section>
#### Principles

- [Component structure](#component-structure)
- [Expressive HTML](#expressive-html)
</section>
<section>
#### Notes

Components need to prescribe a certain HTML structure. Using said structure through intentional tag selectors is the best way to insure structural persistence, to keep specificity and complexity low and prevent naming fatigue. Why rename that which is already named?

</section>

</div>

<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card header {
    padding: 20px;
}
```

```css
/* Don't */
.card__header {
    padding: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### One entity per file with a soft cap of about a hundred lines.
</header>
<section>
#### Principles

- [Autonomous concepts](#autonomous-concept)
- [Concept manipulation](#concept-manipulation)
</section>

<section>
#### Notes

This is one of the most important rules for achieving sustainable CSS. One autonomous concept per file prevents the multiplication of overrides and redefinition across the codebase. It's even easy to enforce with the [ECSS Stylelint config](https://www.npmjs.com/package/@efficientcss/stylelint-config-ecss).

</section>

</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
/* card.css */
.card {
    padding: 20px;
}

/* .metainfo.css */
.metainfo {
    color: grey;
}
```

```css
/* Don't */
/* card.css */
.card {
    padding: 20px;
}

.metainfo {
    color: grey;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Selectors *must* strictly include only necessary selection parts.{#selector-parts}
</header>
<section>
#### Principles

- [Component structure](#component-structure)
- [Selector intention](#selector-intention)
- [Harness specificity](#harness-specificity)
</section>

<section>
#### Notes

This mistake, being passed as "best practices", is the source of many self-induced CSS headaches. Fortunately, the solution is simple: *do not use selection parts that you could remove without changing the original intention*.

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card p {
    font-size: 14px;
}
```

```css
/* Don't */
.card div p {
    font-size: 14px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Duplication of a set of more than 3 rules is discouraged.
</header>
<section>
#### Principles

- [Rule repetition](#rule-repetition)
- [Autonomous concepts](#autonomous-concept)
</section>
<section>
#### Notes

Repeating a pattern instead of naming it and grouping its rules inside a unique declaration block is a classic CSS mistake. And it can be hard to find and target instances of this problem. Tools like PostCSS plugins can help by identifying repetition meeting a defined threshold throughout a codebase.

</section>

</div>
<aside>
#### Example {.as-visually-hidden}


<div>
```css
/* Do */
/* button.css */
.button {
    padding: 10px;
    color: white;
    background-color: grey;
    border: 1px solid black;
}
```

```css
/* Don't */
/* card.css */
.card a {
    padding: 10px;
    color: white;
    background-color: grey;
    border: 1px solid black;
}

/* post.css */
.post button {
    padding: 10px;
    color: white;
    background-color: grey;
    border: 1px solid black;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### The use of the global scope is encouraged for all fundamental design layers.
</header>
<section>
#### Principles

- [Designing language](#designing-language)
- [Designer empowerment](#design-empowerment)
- [Global scope](#global-scope)
- [Global rules](#global-rules)
- [Harness specificity](#harness-specificity)
</section>

</div>
<aside>
#### Example {.as-visually-hidden}


<div>
```css
/* Do */
/* rhythm.css */
p+p {
    margin-top: 20px;
}
```

```css
/* Don't */
/* post.css */
.post p+p {
    margin-top: 20px;
}

/* prose.css */
.prose p+p {
    margin-top: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### HTML structure should be as flat as possible and bereft of single tag nesting.
</header>

<section>
#### Principles

- [Component structure](#component-structure)
- [Expressive HTML](#expressive-html)
</section>

<section>
#### Notes

Sometimes it could make sense to add a div even if it's the only child. The case of a content grid comes to mind. See this page's source for an example.

</section>

</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```html
<!-- Do -->
<article>
    <header></header>
    <footer></footer>
</article>
```

```html
<!-- Don't -->
<article>
    <div>
        <header></header>
        <footer></footer>
    </div>
</article>
```
</div>
</aside>
</div>
</article>

---

<!-- ### Rulesets should be auto-sufficient and avoid implicit but necessary rules. (see #11, #12) -->

<article>

<div>
<div>
<header>
### Specificity *must* be kept as low as possible.{#selector-specificity}
</header>
<section>
#### Principles

- [Harness specificity](#harness-specificity)
- [Child specificity](#child-specificity)
</section>

<section>
#### Notes

Sometimes it makes sense to add specificity. But don't do it until proven necessary.

</section>
</div>
<aside>
#### Example {.as-visually-hidden}

<div>
```css
/* Do */
.card :where(h1, h2, h3, h4, h5, h6) {
    font-size: 24px;
}
```

```css
/* Don't */
.card :is(h1, h2, h3, h4, h5, h6) {
    font-size: 24px;
}
```
</div>
</aside>

</div>
</article>


</section>

<section>
## Related tools{#tools}

- [ECSS Stylelint config](https://www.npmjs.com/package/@efficientcss/stylelint-config-ecss) (get live authoring tips!)
- [Scaffolding &amp; code library](https://github.com/efficientcss/scaffolding) (use it... or not!)
- [Stylelint](https://stylelint.io) (lint and inform)
- [CSSCSS](https://github.com/zmoazeni/csscss) (find rule duplication in your codebase)
- [PurifyCSS](https://github.com/purifycss/purifycss), [PurgeCSS](https://github.com/FullHuman/purgecss) or Chrome Coverage devtool
</section>
