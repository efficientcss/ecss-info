<div id="introduction">
<header>
<h2 class="as-visually-hidden">Introduction</h2>

Éviter les problèmes de style courants est simple. Et vous n’avez besoin que de CSS efficace. Rien de plus.

**ECSS établit des règles simples pour des styliser simplement.** Plus besoin de tout nommer, plus de dépendances technologiques. Uniquement du CSS intentionnel, cohérent, simple, expressif, prévisible et durable.

</header>
<div style="--DivItemBasis: 12rem;">
<section>
<h3 class="h4">Vous voulez de l'aide pour appliquer les règles ?</h3>

👮 Poussez doucement vous et votre équipe vers l'ECSS.

[Installez la config Stylelint](https://www.npmjs.com/package/@efficientcss/stylelint-config-ecss){.button}

</section>

<section>
<h3 class="h4">Envie de construire quelque chose ?</h3>

🏁 Un point de départ rapide & efficace est à portée de main !

[Téléchargez la bibliothèque de fichiers de départ](https://github.com/efficientcss/scaffolding)

</section>

<section>
<h3 class="h4">Vous voulez connaître la bête ?</h3>

📰 Allez, voyons ce que vous en pensez !

[Plongez dans les règles ECSS](#regles)

</section>

<section>
<h3 class="h4">Curieux de tout savoir ?</h3>

Eh bien, continuez à faire défiler la page !

</section>
</div>

<section>
## Pourquoi ECSS ?

Parce que le CSS en tant que langage est mal compris et injustement mal-aimé. Parce que des règles simples et des outils à faible impact peuvent grandement contribuer à garantir que la base de code CSS est légère, simple et évolutive. ECSS est une approche globale pour produire des systèmes de conception efficaces avec CSS.

</section>
</div>
<section>
## Valeurs{#valeurs}

<div style="--DivItemBasis: 20rem;">
<section>
### Intentionnalité

**Objectifs clairs, décisions rationnelles.**

Chaque parcelle de CSS a un objectif. Cet objectif doit être clair pour quiconque lit le code. Que ce soit dans le HTML ou le CSS. Les sélecteurs sont le véhicule parfait pour l’intentionnalité. ECSS encourage l'utilisation de sélecteurs rationnels.

</section>

<section>
### Cohérence

**La répétition de patrons permet d'économiser du temps et de l'énergie.**

Des directives de dénomination flexibles confèrent à la base de code une cohérence encourageant la standardisation et la réutilisation. Les préfixes et les directives d'utilisation appliqués via le *linting* garantissent que tous les membres de votre équipe suivront les règles ECSS.
</section>

<section>
### Simplicité

**« Simple » consiste à écrire moins de code et à limiter les dépendances.**

La soupe de classe et l'abus de `div`{.html} ne sont pas simples. Un nombre incalculable de requêtes `@media`{.css} ne le sont pas non plus. Mais le CSS moderne l’est. En acceptant CSS pour ce qu'il est (un langage de conception graphique !), vous pouvez faire *beaucoup* de style avec très peu de code.

</section>

<section>
### Expressivité

**Un code qui parle de lui-même est réellement accessible.**

`thumbnail as-circle with-border`{.html} est instantanément compréhensible alors que `h-10 w-10 bdr-50 br-1 overh`{.html} ne l'est pas. Le code doit communiquer des informations. Plus les informations sont claires, plus il est facile de comprendre le système. Une sémantique erronée doit céder la place à l'expressivité. *Les meilleures pratiques expressives fonctionnent.*

</section>

<section>
### Prévisibilité

**L'utilisation de règles de création simples mais cohérentes conduit à la prévisibilité.**

Ça fait du bien de plonger dans du code inconnu… tout en sachant déjà à quoi il ressemble. La cohérence, les modèles répétitifs, la simplicité (oui, encore une fois) se fondent dans un code prévisible. Et un code prévisible signifie moins de stress, moins de frictions et des équipes plus heureuses !

</section>

<section>
### Durabilité

**Le CSS « à la vanille » est prêt pour l'avenir.**

En pratique, cela signifie être à la fine pointe du progrès et de l’évolution. Pas besoin d'attendre que des librairies tierces implémentent de nouvelles fonctionnalités. Vous pouvez utiliser `clamp()`{.css} dès maintenant et dire au revoir à 80 % de vos requêtes `@media`{.css}. Plus de `sm-ceci md-cela`{.html}. Uniquement du code propre et moderne.

</section>
</div>
</section>
<link rel="stylesheet" href="../assets/css/6.components/of-side-by-side-h-p.css" />
<section class="of-side-by-side-h-p as-numbered-list">

## Principes directeurs{#principes}

<article>
### CSS est un langage de *conception graphique*, pas un langage de programmation.{#langage-conception}

La création CSS doit refléter les modèles, les concepts et les perspectives de *conception graphique*. Avec des échelles globales (désolé), des « tokens », des règles, etc., vous limitez la répétition et facilitez l'extension future de vos styles graphiques.

</article>

<article>
### Donner aux concepteurs graphiques les moyens d'affiner leur travail de manière autonome est efficace.{#concepteurs-autonomes}

Rendre les parties nécessaires du CSS intelligibles aux concepteurs (codeurs ou non !) réduit le stress, le temps et favorise une bonne allocation des ressources humaines. Affiner le design dans le navigateur est un grand vecteur de rentabilité économique.

</article>

<article>
### Toutes les propriétés CSS ne sont pas nées égales.{#proprietes-inegales}

Les propriétés du modèle de boîte (`display`{.css}, `position`{.css}, `width`{.css}, etc.) sont extrêmement sensibles et potentiellement bien plus perturbatrices que, disons, la couleur ou la typographie. Les premiers appartiennent aux auteurs CSS professionnels et les seconds sont ceux que les concepteurs devraient pouvoir utiliser, modifier et expérimenter en contexte.

</article>

<article>
### Les propriétés et les unités ont des rôles et une utilisation spécifiques.{#role-specifique}

Limiter leur utilisation à ces rôles améliore la clarté et favorise la cohérence ainsi que la prévisibilité. Il en va de même pour les unités. Certaines suggèrent de la typographie, d’autres des images ou du rythme. Utilisez-les intentionnellement et rationnellement pour communiquer du sens.

</article>

<article>
### Les composants et les modèles *ont besoin* d'une structure.{#structure-composant}

Essayer de l’abstraire est vain. Au lieu de cela, la documentation et la diligence sont essentielles. Le HTML est sémantiquement riche, alors choisissez les bonnes balises et évitez de les modifier pour des raisons superficielles. On ne supprimerait ou ne modifierait pas `class="header"`{.html} sans d'abord comprendre son objectif, et il ne faut pas non plus modifier ou supprimer `<header></header>`{.html} sur un coup de tête.

</article>

<article>
### Les sélecteurs CSS sont des véhicules d'intention.{#intention-selecteur}

Chaque particule de sélection doit avoir un but et sinon, elle doit être éliminée. Ce `div`{.css} étranger dans `.card div h2`{.css} est ce qui rend le CSS fragile. Ce ne sont *pas* les ["meilleures pratiques"](https://adamwathan.me/css-utility-classes-and-separation-of-concerns/).

</article>

<article>
### Les types de sélecteurs ont tous une fonction.{#fonction-selecteur}

Chacun d’eux peut être utile dans un certain contexte. Aucune règle d’usage absolue ne doit être édictée. Ce n'est pas « toujours » ou « jamais » mais « ça dépend » et « pourquoi ». Les règles absolues corrompent absolument. Ou quelque chose comme ça...

</article>

<article>
### La spécificité doit être exploitée et non rejetée.{#exploiter-specificite}

Néanmoins, « toujours » (hum) la garder aussi basse que possible. Oui, en 2015, cela n’était peut-être pas facile. Mais nous sommes en 2023 et de [nouvelles](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers) [fonctionnalités](https://developer.mozilla.org/en-US/ docs/Web/CSS/:where) sont désormais largement prises en charge. Utilisez-les.

</article>

<article>
### La portée globale en CSS n'est pas un péché.{#portee-globale}

N'oubliez pas que *CSS est un langage de conception graphique* et que sa portée globale s'intègre parfaitement dans l'approche dimensionnelle fondamentalement stratifiée de la conception graphique. Les meilleures pratiques de programmation ne correspondent pas nécessairement aux meilleures pratiques de conception graphique. Adoptez les meilleures pratiques de conception graphique.

</article>

<article>
### Les règles de conception globales doivent être en grande partie anonymes.{#regles-globales}

Seulement quelques déclarations par ensemble de règles uniquement. Nous parlons de rythme, de typographie, de couleur ; pas `display`{.css} ou `position`{.css}. *C'est ça,* le moyen de limiter la répétition, les ballonnements et la complexité.

</article>

<article>
### Il faut attendre qu'un concept soit bien compris avant de le nommer.{#comprendre-concept}

En attendant, utilisez des éléments HTML. L'abstraction prématurée ou ["résoudre des problèmes pas encore rencontrés"](https://en.wikipedia.org/wiki/Overengineering) sont des problèmes plus importants que l'utilisation de `header`{.css} en CSS. Oui, ce sont les meilleures pratiques de programmation. Mais qui vous a dit que le développement CSS était purement de la conception graphique ?

</article>

<article>
### Lorsque plus de 3 règles sont répétées plus de 3 fois, un concept *apparaît*.{#repetition-regles}

Les règles devraient ensuite être centralisées en nommant et en utilisant ledit concept au lieu des règles simples. La réutilisabilité, l’expressivité et la simplicité s’en trouvent alors grandement améliorées.

</article>

<article>
### Les concepts nommés doivent être autonomes et autosuffisants.{#concept-autonome}

Les concepts nommés ne doivent pas être définis à l'intérieur d'un autre concept nommé. Si jamais cela est nécessaire, le concept enfant doit être interne au concept parent et ne doit *pas* être réutilisé ailleurs.

</article>

<article>
### La manipulation de concepts nommés dans plusieurs fichiers est strictement interdite.{#manipulation-concept}

Toutes les règles d'un concept nommé doivent résider dans le même fichier CSS unique. Pour que les auteurs et les responsables aient confiance dans le système, il doit exister une seule [source de vérité](https://en.wikipedia.org/wiki/Single_source_of_truth) pour tout concept.

</article>

<article>
### Les concepts « enfants » reliés à l'état, les variantes ou la structure doivent être dotés d'un préfixe.{#concept-enfant}

Ces concepts peuvent être représentés sous forme de classes enfants ou combinées. Ne jamais utiliser ces classes seules, mais toujours en complément du concept parent. Oui, voici « jamais » *et* « toujours » dans la même phrase. ["Double jeopardy, we are fine"](https://www.youtube.com/watch?v=Z58eTP2gcw0) dirait un grand gestionnaire.

</article>

<article>
### Les classes avec préfixe doivent généralement être implémentées avec des sélecteurs réduisant la spécificité.{#enfant-specificite}

Sauf nécessité contraire, il faut s’efforcer de maintenir la spécificité à 21 ou moins. Avec une préférence autour de 10 à 12. Il faut ici utiliser des pseudo-sélecteurs modernes et largement supportés.

</article>

<article>
### On ne trouvera peut-être pas au premier abord la manière efficace de sélectionner les éléments d'interface.{#efficience-selecteur}

L'intention peut ne pas être claire au début du travail de stylisation. Au lieu d'essayer et d'essayer en vain, un fichier de code « quarantaine » doit être utilisé temporairement jusqu'à ce que la bonne sélection se manifeste. Toutefois, aucun fichier de quarantaine ne devrait jamais être publié publiquement « en production ».

</article>

<article>
### Le HTML doit être aussi simple et expressif que possible.{#html-expressif}

Évitez de « sur-contenir », n'utilisez pas `<div>`{.html} là où vous pourriez utiliser `<aside>`{.html}. N'enveloppez pas votre navigation à un seul niveau dans des listes à puces. Et oui, une navigation simple est [accessible](https://dockyard.com/blog/2019/11/29/using-nav-without-a-list-element). « Keep it simple... Suzy », qu'ils disent en anglais.

</article>

<article>
### Tout élément HTML ne doit assumer qu'un seul rôle.{#role-unique}

Conformément à la célèbre [meilleure pratique](https://en.wikipedia.org/wiki/Single-responsibility_principle) de programmation (encore une fois, la programmation dans la conception), les balises sémantiques sont pour... la sémantique tandis que `<div>`{.html} ou `<span>`{.html} sont destinées à la division graphique ou logique. Tout type de grille devrait être implémenté avec les balises `<div>`{.html}.

</article>

<article>
### Toute adaptation de `@media`{.css} doit être incluse dans le fichier de son concept associé.{#adaptation-incluse}

Pas sous forme de fichier séparé, ni sous forme de classes suffixées. Si l'on utilise des classes utilitaires, les règles fournies ne doivent pas dépendre de la requête mais plutôt être universellement nécessaires, dans chaque configuration média.

</article>

<article>
### Des feuilles de style entières sont mieux utilisées lorsqu'elles sont globales.{#feuille-globale}

Les requêtes `@media`{.css} devraient être utilisées dans les balises HTML `<link>`{.html} pour des considérations de réutilisation, de performance et d'optimisation. Chaque couche de fondamentale conception graphique devrait être autonome, indépendante et amovible.

</article>

<article>
### Le style des composants ne doit être servi qu'avec des composants actifs.{#styliser-composant}

Pas sous la forme d'un gros fichier minifié dans la balise `<head>`{.html} du document. De cette façon, le fameux problème du chargement de code CSS inutilisé est pratiquement résolu, sans aucune dette technologique. Le premier rendu est également plus rapide puisque seul ce qui est utilisé dans la fenêtre est traité par le navigateur. En prime, vous obtenez le chemin du fichier CSS dans le fichier du composant.

</article>

<article>
### Laissez le navigateur faire autant de travail de rendu que possible.{#rendu-navigateur}

En adoptant la fluidité, l'adaptabilité est principalement assurée par le navigateur. Moins de règles sont nécessaires pour assurer un rendu correct dans le nombre infini de contextes d'utilisation.

</article>

<article>
### Utilisez pleinement les outils de développement disponibles gratuitement en suivant le grain de la plateforme Web.{#outil-devs}

En utilisant des ensembles de règles « juste à temps », des « tokens » de conception, la cascade et la sélection intentionnelle, le flux de travail de débogage et d'affinage est plus simple, plus léger et plus clair. Les « devtools » sont nos amis !

</article>

<article>
### Éviter les abstractions technologiques telles que les « frameworks » de haut niveau favorisent un code natif plus léger et plus simple.{#code-natif}

En écrivant du CSS natif, on utilise mieux le CSS ; en écrivant du HTML natif, on utilise mieux le HTML. Meilleur CSS et meilleur HTML produisent une meilleure expérience utilisateur.

</article>

</section>

<link rel="stylesheet" href="../assets/css/6.components/of-side-by-side-text-code.css" />
<section class="of-side-by-side-text-code">
## Règles de développement{#regles}

<!-- - [TODO] : use of style attributes with custom properties. -->

<article>
<div>
<div>
<header>
### Tous les sélecteurs de composants *doivent* commencer par leur nom de fichier.{#fichier-selecteur}
</header>

<section>

#### Principes

- [Concepts autonomes](#concept-autonome)
- [Manipulation de concepts](#manipulation-concept)

</section>
<section>

#### Notes

Pour exclure un fichier de cette règle dans la configuration **Stylelint**, préfixez le nom du fichier avec un chiffre ou "x-" comme dans "x-quarantine.css".

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
/* card.css */
.card {
    ...
}
```

```css
/* Incorrect */
/* card.css */
.small-card {
    ...
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Tous les dégagements devraient d'abord être uniformes, puis ajustés si nécessaire.
</header>

<section>
#### Principes

- [Rôle spécifique](#role-specifique)
</section>

<section>
#### Notes

Des dégagements non uniformes peuvent être utilisés dans des cas particuliers pour des raisons de débordement `overflow`{.css} ou pour ajouter un pseudo-contenu.

</section>

</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card {
    padding: 20px;
    padding-top: 30px;
}
```

```css
/* Incorrect */
.card {
    padding: 30px 20px 20px 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>
<div>
<div>
<header>
### Les dégagements doivent être appliqués uniquement aux éléments conteneurs et interactifs.
</header>
<section>
#### Principes

- [Rôle unique](#role-unique)
</section>

<section>
#### Notes

Les éléments de texte ne doivent héberger que des styles de texte, tandis que les éléments conteneurs peuvent héberger des styles de thème. Dans certains cas, les éléments conteneurs peuvent héberger des styles de texte dont les enfants hériteront.

</section>

</div>

<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card header {
    padding: 10px;
}
```

```css
/* Incorrect */
.card h2 {
    padding: 10px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Les marges horizontales ne devraient pas être appliquées aux éléments de texte.
</header>
<section>
#### Principes

- [Rôle spécifique](#role-specifique)
- [Rôle unique](#role-unique)
</section>

<section>
#### Notes

Des marges horizontales peuvent être appliquées aux éléments de texte dans le cas d'_éléments en ligne_ `inline`{.css} tels que des icônes ou des balises et sur des éléments en retrait comme `blockquote`{.html}.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card {
    padding: 20px;
}
```

```css
/* Incorrect */
.card p {
    margin-left: 40px;
    margin-right: 40px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Les éléments typographiques doivent utiliser l'héritage lorsque cela est possible.
</header>
<section>
#### Principes

- [Rôle spécifique](#role-specifique)
- [Portée globale](#portee-globale)
</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>

```css
/* Correct */
html {
    line-height: 1.2;
}
```

```css
/* Incorrect */
p {
    line-height: 1.2;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Le langage graphique devrait être utilisé pour la plupart des valeurs numériques.
</header>
<section>
#### Principes

- [Langage de conception](#langage-conception)
- [Autonomie de la conception](#concepteurs-autonomes)
- [Profiter des outils de développement](#outil-devs)
</section>

<section>
#### Notes

Les valeurs numériques ne doivent être utilisées que pour des alignements exceptionnels. Ceux-ci doivent être commentés pour communiquer l’intention. Même dans ce cas, pourquoi ne pas créer une propriété personnalisée portant un nom significatif ?

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card {
    padding: var(--small-spacing);
}
```

```css
/* Incorrect */
.card {
    padding: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### La répétition des règles par défaut est déconseillée.
</header>
<section>
#### Principes

- [Intention du sélecteur](#intention-selecteur)
- [Fonction du sélecteur](#fonction-selecteur)
</section>

<section>
#### Notes

Tout cas de répétition d'un défaut *doit* être justifié dans un commentaire.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.dropdown:not(:hover) {
    display: none;
}
```

```css
/* Incorrect */
.dropdown {
    display: none;
}

.dropdown:hover {
    display: block;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Toutes les entités de classe outre les composants *doivent* être préfixées.
</header>
<section>
#### Principes

- [Concepts enfant](#concept-enfant)
- [Intention du sélecteur](#intention-selecteur)
- [Fonction du sélecteur](#fonction-selecteur)
- [Autonomie des concepts](#concept-autonome)
</section>

<section>
#### Notes

Nous proposons cette nomenclature de prefixes :

- `as-`{.css} : forme graphique générique.
- `of-`{.css} : groupe d'éléments.
- `is-`{.css} état interactif du système.
- `on-`{.css} : interaction de l'usager.
- `in-`{.css} : concept interne.
- `with-`{.css} : règle fonctionnelle.
- `from-*-to-`{.css} : patrons adaptatifs.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}
<div>
```css
/* Correct */
.card.as-circle {
    width: 20px;
}

.card .in-ctn {
    display: grid;
}
```

```css
/* Incorrect */
.card.circle {
    width: 20px;
}

.card .ctn {
    display: grid;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### L'imbrication est limitée à un seul niveau.
</header>
<section>
#### Principes

- [Concepts enfant](#concept-enfant)
- [Intention du sélecteur](#intention-selecteur)
</section>
<section>
#### Notes

L'imbrication peut encourager le développement en mode « pilote automatique », sans réfléchir à notre intention de sélection. C'est l'une des raisons pour lesquelles, ultimement, nous écrirons `.card div h2`{.css} au lieu de `.card h2`{.css}, fragilisant notre CSS. Un seul niveau d’imbrication devrait suffire dans presque tous les cas.

</section>



</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card {
    & div {
        display: grid;
    }

    & h2 {
        color: grey;
    }
}
```

```css
/* Incorrect */
.card {
    & div {
        display: grid;

        & h2 {
            color: grey;
        }
    }
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### L'utilisation de dimensions spécifiques doit être évitée.
</header>
<section>
#### Principes

- [Propriétés inégales](#proprietes-inegales)
- [Rôle spécifique](#role-specifique)
- [Profiter du navigateur](#rendu-navigateur)
</section>
<section>
#### Notes

Le Web est fluide et la création CSS devrait adopter cette fluidité. En choisissant de limiter les dimensions de nos composants au lieu de les dicter, nous déléguons au navigateur, le laissant faire son travail. Les dimensions fixes ne devraient être appliquées qu'aux éléments graphiques tels que les images, les vidéos et les icônes.

</section>


</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card {
    max-width: 30ch;
}
```

```css
/* Incorrect */
.card {
    width: 30ch;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Utilisez des sélecteurs d'attributs pour communiquer l'unicité.
</header>
<section>
#### Principes

- [Intention du sélecteur](#intention-selecteur)
- [Rôle spécifique](#role-specifique)
- [Exploiter la spécificité](#exploiter-specificite)
</section>
<section>
#### Notes

Les identifiants `id` véhiculent du sens mais leur sélecteur CSS est un cauchemar de spécificité. Utilisez le sélecteur d'attribut pour conserver le sens (unicité !) tout en gardant la spécificité à des niveaux raisonnables. D'autres cas d'utilisation incluent les contrôles et champs de formulaire et les états gérés par le js (p. ex. `[data-state="active"]`{.css})

</section>


</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
[id="main"] {
    max-width: 80ch;
}
```

```css
/* Incorrect */
#main {
    max-width: 80ch;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### L'utilisation de règles de positionnement et d'affichage doit être minimisée.
</header>
<section>
#### Principes

- [Propriétés inégales](#proprietes-inegales)
- [Profiter du navigateur](#rendu-navigateur)
</section>

<section>
#### Notes

Utilisez ces propriétés uniquement sur les éléments qui en ont besoin. Utilisez les sélecteurs les plus étroits qui ont du sens dans le contexte.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card header {
    display: flex;
}
```

```css
/* Incorrect */
header {
    display: flex;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Les sélecteurs surqualifiés sont déconseillés.
</header>
<section>
#### Principes

- [Exploiter la spécificité](#exploiter-specificite)
- [Intention du sélecteur](#intention-selecteur)
</section>
<section>
#### Notes

Les entités de classe ne devraient pas être combinées à des sélecteurs de balises. Les sélecteurs génériques peuvent être utilisés comme morceau de sélection mais pas comme qualificatifs. Exceptionnellement, certaines balises à usage spécifique comme `html`{.css} ou `body`{.css} pourraient être utilisées pour restreindre l'application d'une entité de classe.

</section>

</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
html.is-loading {
    opacity: 0;
}

.card {
    color: red;
}
```

```css
/* Incorrect */
article.card {
    color: red;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Les composants ne peuvent pas exercer d'influence extérieure.
</header>
<section>
#### Principes

- [Autonomie des concepts](#concept-autonome)
- [Propriétés inégales](#proprietes-inegales)
- [Rôle spécifique](#role-specifique)
</section>
<section>
#### Notes

Les composants sont faits pour être insérés dans des « trous ». Ces trous sont gérés par un autre composant ou un utilitaire de plus haut niveau (p. ex. une grille ou un carrousel). Aucun composant en ce sens ne devrait incorporer de marges. Celles-ci sont appliquées en tant que rythme par un parent. Ainsi, les composants sont polyvalents et réutilisables en divers contextes.

</section>

</div>
<aside>
#### Exemple {.as-visually-hidden}


<div>
```css
/* Correct */
.as-pile>*+* {
    margin-top: 20px;
}
```

```css
/* Incorrect */
.card {
    margin-top: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Le débordement ne doit pas être masqué.
</header>
<section>
#### Principes

- [Profiter du navigateur](#rendu-navigateur)
- [Propriétés inégales](#proprietes-inegales)
</section>

<section>
#### Notes

En masquant la façon dont les navigateurs traitent les éléments débordants, nous pouvons masquer du contenu sans le savoir. En utilisant `auto`{.css} au lieu de `hidden`{.css}, le contenu débordant sera accessible *et* la barre de défilement signalera le problème de conception au lieu de le masquer. Masquer les barres de défilement peut être nécessaire dans certaines compositions particulières (voir l'adaptation portrait de ce même site pour un exemple !).

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.container {
    max-height: 50dvh;
    overflow: auto;
}
```

```css
/* Incorrect */
.container {
    max-height: 50dvh;
    overflow: hidden;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Les nombres dans les noms de classes sont à éviter.
</header>
<section>
#### Principes

- [Intention du sélecteur](#intention-selecteur)
</section>

<section>
#### Notes

Les nombres peuvent transmettre une intention dans les cas de système de grille comme, par exemple, `grid-10`{.html} ou `col-3`{.html}. Néanmoins, l’utilité de ces systèmes est faible à l’époque moderne du CSS. Il est suggéré de les laisser de côté.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card {
    color: grey;
    font-size: 18px;
}

.card.as-featured {
    color: red;
    font-size: 20px;
}
```

```css
/* Incorrect */
.card {
    color: grey;
    font-size: 18px;
}

.card-1 {
    color: red;
    font-size: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Les nombres magiques *doivent* être évités ou expliqués dans un commentaire de ligne.
</header>
<section>
#### Principes

- [Langage de conception](#langage-conception)
- [Autonomie de la conception](#concepteurs-autonomes)
- [Rôle spécifique](#role-specifique)
</section>

<section>
#### Notes

Les choix de valeurs et d'unités doivent être dictés par le langage graphique et ses jetons de conception. Les valeurs absolues sous forme numérique doivent être réservées à des cas particuliers tels que l'alignement d'icônes sur mesure ou le dégagement d'une liste à puces. L'intention *doit* être claire en elle-même ou commentée sinon.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card {
    line-height: var(--line-tight);
}
```

```css
/* Incorrect */
.card {
    line-height: 17px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Le rythme *doit* être appliqué dans une seule direction, de préférence vers le haut.
</header>
<section>
#### Principes

- [Langage de conception](#langage-conception)
- [Rôle spécifique](#role-specifique)
</section>

<section>
#### Notes

Espacer est rythmer, un concept de design fondamental. Le rythme se produit *entre* les éléments graphiques et doit être appliqué comme tel en CSS. Le sélecteur [hibou lobotomisé](https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/){target="\_blank"} (`*+*`{.css}) est conçu sur mesure pour cette tâche. Lorsque vous utilisez un conteneur flexible, la propriété `gap`{.css} fait tout pour vous !

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}


<div>
```css
/* Correct */
.as-pile>*+* {
    margin-top: 20px;
}
```

```css
/* Incorrect */
.as-pile>* {
    margin-top: 20px;
    margin-bottom: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### L'utilisation d'unités problématiques est déconseillée.
</header>
<section>
#### Principes

- [Rôle spécifique](#role-specifique)
</section>

<section>
#### Notes

Les unités de fenêtre d'affichage statiques (`vh`{.css}, `vw`{.css}, `vmin`{.css}, `vmax`{.css}) sont notoirement problématiques, en particulier lorsqu'elles sont utilisées comme `100vh`{.css} ou `100vw`{.css}. Les [unités dynamiques de fenêtre](https://caniuse.com/viewport-unit-variants){target="\_blank"} sont mieux adaptées à cette tâche.

</section>

</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
nav {
    min-height: 100dvh;
}
```

```css
/* Incorrect */
nav {
    min-height: 100vh;
}
```
</div>
</aside>
</div>
</article>

<article>

<div>
<div>
<header>
### Les sélecteurs de balises doivent être exploités à l'intérieur des composants.
</header>
<section>
#### Principes

- [Structure du composant](#structure-composant)
- [HTML expressif](#html-expressif)
</section>
<section>
#### Notes

Les composants doivent prescrire une certaine structure HTML. L’utilisation de cette structure via des sélecteurs de balises intentionnels est le meilleur moyen d’assurer la persistance structurelle, de maintenir la spécificité et la complexité à un niveau faible et d’éviter de se fatiguer à force de tout nommer. Pourquoi renommer ce qui est déjà nommé ?

</section>

</div>

<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card header {
    padding: 20px;
}
```

```css
/* Incorrect */
.card .card__header {
    padding: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Une entité par fichier avec une limite souple d'une centaine de lignes.
</header>
<section>
#### Principes

- [Autonomie des concepts](#concept-autonome)
- [Manipulation de concept](#manipulation-concept)
</section>

<section>
#### Notes

C’est l’une des règles les plus importantes pour parvenir à un CSS durable. Un concept autonome par fichier évite la multiplication des surcharges et redéfinitions de propriétés dans la base de code. C'est même facile à appliquer avec la [configuration ECSS Stylelint](https://www.npmjs.com/package/@efficientcss/stylelint-config-ecss).

</section>

</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
/* card.css */
.card {
    padding: 20px;
}

/* .metainfo.css */
.metainfo {
    color: grey;
}
```

```css
/* Incorrect */
/* card.css */
.card {
    padding: 20px;
}

.metainfo {
    color: grey;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### Les sélecteurs *doivent* inclure strictement et uniquement les éléments de sélection nécessaires.
</header>
<section>
#### Principes

- [Structure du composant](#structure-composant)
- [Intention du sélecteur](#intention-selecteur)
- [Exploiter la spécificité](#exploiter-specificite)
</section>

<section>
#### Notes

Cette erreur, considérée à tort comme une « meilleure pratique », est à l'origine de nombreux maux de tête CSS dont nous sommes nous-mêmes responsables. Heureusement, la solution est simple : *n'utilisez pas d'éléments de sélection que vous pourriez supprimer sans changer l'intention initiale*.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card p {
    font-size: 14px;
}
```

```css
/* Incorrect */
.card div p {
    font-size: 14px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### La duplication d'un ensemble de plus de 3 règles est déconseillée.
</header>
<section>
#### Principes

- [Répétition de règles](#repetition-regles)
- [Autonomie des concepts](#concept-autonome)
</section>
<section>
#### Notes

Répéter un patron au lieu de le nommer et de regrouper ses règles dans un ensemble de règles unique est une erreur CSS classique. Et il peut être difficile de trouver et de cibler les instances de ce problème. Des outils tels que les plugins PostCSS peuvent aider en identifiant les répétitions atteignant un seuil défini dans une base de code.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}


<div>
```css
/* Correct */
/* button.css */
.button {
    padding: 10px;
    color: white;
    background-color: grey;
    border: 1px solid black;
}
```

```css
/* Incorrect */
/* card.css */
.card a {
    padding: 10px;
    color: white;
    background-color: grey;
    border: 1px solid black;
}

/* post.css */
.post button {
    padding: 10px;
    color: white;
    background-color: grey;
    border: 1px solid black;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### L'utilisation de la portée globale est encouragée pour toutes les couches de conception fondamentales.
</header>
<section>
#### Principes

- [Langage de conception](#langage-conception)
- [Autonomie de la conception](#concepteurs-autonomes)
- [Portée globale](#portee-globale)
- [Règles globales](#regles-globales)
- [Exploiter la spécificité](#exploiter-specificite)
</section>

</div>
<aside>
#### Exemple {.as-visually-hidden}


<div>
```css
/* Correct */
/* rhythm.css */
p+p {
    margin-top: 20px;
}
```

```css
/* Incorrect */
/* post.css */
.post p+p {
    margin-top: 20px;
}

/* prose.css */
.prose p+p {
    margin-top: 20px;
}
```
</div>
</aside>
</div>
</article>

---

<article>

<div>
<div>
<header>
### La structure HTML doit être aussi plate que possible et dépourvue d'imbrication de balises uniques.
</header>

<section>
#### Principes

- [Structure du composant](#structure-composant)
- [HTML expressif](#html-expressif)
</section>

<section>
#### Notes

Parfois, il peut être judicieux d'ajouter un `div`{.html} même s'il s'agit du seul enfant. Le cas d’une grille de contenu vient à l’esprit. Voir la source de cette page pour un exemple.

</section>

</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```html
<!-- Do -->
<article>
    <header></header>
    <footer></footer>
</article>
```

```html
<!-- Don't -->
<article>
    <div>
        <header></header>
        <footer></footer>
    </div>
</article>
```
</div>
</aside>
</div>
</article>

---

<!-- ### Rulesets should be auto-sufficient and avoid implicit but necessary rules. (see #11, #12) -->

<article>

<div>
<div>
<header>
### La spécificité *doit* être maintenue aussi faible que possible.
</header>
<section>
#### Principes

- [Exploiter la spécificité](#exploiter-specificite)
- [Spécificité des enfants](#enfant-specificite)
</section>

<section>
#### Notes

Il est parfois judicieux d’augmenter la spécificité. Mais ne le faites pas avant que cela ne soit prouvé nécessaire.

</section>
</div>
<aside>
#### Exemple {.as-visually-hidden}

<div>
```css
/* Correct */
.card :where(h1, h2, h3, h4, h5, h6) {
    font-size: 24px;
}
```

```css
/* Incorrect */
.card :is(h1, h2, h3, h4, h5, h6) {
    font-size: 24px;
}
```
</div>
</aside>

</div>
</article>


</section>

<section>
## Outils reliés{#outils}

- [Config Stylelint pour ECSS](https://www.npmjs.com/package/@efficientcss/stylelint-config-ecss)
- [Scaffolding &amp; code library](https://github.com/efficientcss/scaffolding)
- [Stylelint](https://stylelint.io)
- [CSSCSS](https://github.com/zmoazeni/csscss)
- [PurifyCSS](https://github.com/purifycss/purifycss), [PurgeCSS](https://github.com/FullHuman/purgecss) ou Chrome Coverage devtool
</section>
